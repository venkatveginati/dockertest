pipeline {

  agent any
  
 parameters {
	choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
 //   string(name: 'ImageName', description: "Name of the docker build")
//	string(name: 'ImageTag', description: "Name of the docker build")
	string(name: 'AppName', description: "Name of the Application")
  //  string(name: 'docker_repo', description: "Name of docker repository")
  }
      
  tools{ 
        maven 'maven3'
    }
    stages {
        stage('checkout') {
        steps {
            git 'https://github.com/venkatveginati/dockertest.git'
        }
    }
    stage('Build Maven'){
            when {
				expression { params.action == 'create' }
			}
    		steps {
        		dir("${params.AppName}") {
        			sh 'mvn -f /var/lib/jenkins/workspace/springboot-app/MyAwesomeApp/pom.xml clean package'
        		//	sh 'mvn clean package'
        		}
    		}
	    }
		stage ('Docker Build') {
        steps{
            script{
     // Build and push image with Jenkins' docker-plugin
    
        withDockerRegistry([credentialsId: "dockerhub", url: "https://index.docker.io/v1/"]) {
        image = docker.build("venkatveginati095/dockertest1", "MyAwesomeApp")
        image.push()    
        }
      
            }
        }
    }
     stage("Create deployment") {
			when {
				expression { params.action == 'create' }
			}
	        steps {
	            dir("${params.AppName}") {
	                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
	                        accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
	                        credentialsId: 'AWS_Credentials', 
	                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
	                    withCredentials([kubeconfigFile(credentialsId: 'K8S', 
	                        variable: 'KUBECONFIG')]) {
	                        sh 'kubectl create -f /var/lib/jenkins/workspace/springboot-app/MyAwesomeApp/springBootDeploy.yml'
	                    }
	                }
	            }
	        }
	    }
	
        
	}	
}
